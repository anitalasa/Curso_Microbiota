library(devtools)
library(BiocGenerics)
library(ANCOMBC)
library(phyloseq)
library(edgeR)
library(microbiome)
install.packages("devtools")#es necesario instalarlo para instalar algunos paquetes alojados en GitHub en vez de en CRAN
library(devtools)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("BiocGenerics", "ANCOMBC", "phyloseq","edgeR","microbiome"))#necesarios para que micro4all funcione correctamente
install.packages("devtools")
library(devtools)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("BiocGenerics", "ANCOMBC", "phyloseq","edgeR","microbiome"))#necesarios para que micro4all funcione correctamente
library(phyloseq)
setwd("C:/Users/radik/Desktop/Curso")
metadatos = read.table("metadata.txt", sep="\t", header=TRUE)
library(devtools)
library(BiocGenerics)
library(ANCOMBC)
library(phyloseq)
library(edgeR)
library(microbiome)
library(pairwiseAdonis)
library(micro4all)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(gdata)
metadatos = read.table("metadata.txt", sep="\t", header=TRUE)
row.names(metadatos) = metadatos$samples
ASV_final=read.table("ASV_final_bact.txt", sep="\t", header=TRUE)
View(ASV_final)#visualizamos la tabla de ASVs para saber en que posiciones (columnas) se encuentra la taxonomia
tax = ASV_final[,2:8] #indicamos las posiciones que ocupa la taxonomia (de Kingdom a ASV)
ASV =  ASV_final[,9:ncol(ASV_final)] #indicamos las posiciones que ocupa la ocurrencia de los ASVs
dna = Biostrings::DNAStringSet(ASV_final$ASV_seqs)#guardamos la seq de cada ASV llamando a la funcion DNAStringSet del paquete Biostrings
#si tecleamos el 'dna' en la consola veremos el aspecto que tiene. Si nos fijamos bien, veremos que las secuencias las numera de de forma ascendente, pero no sabemos a que ASV corresponde
names(dna) = ASV_final$ASV_names #asignamos a cada secuencia el nombre del ASV correspondiente
row.names(tax) = ASV_final$ASV_names #hacemos que el nombre de cada linea sea justamente el nombre de los ASV
row.names(ASV) = ASV_final$ASV_names
identical(rownames(ASV), rownames(tax)) #comprobamos que los nombres de las filas son identicos y que corresponden con el nombre de los ASV.
phy_tree =  phyloseq::read_tree("phy_tree") #lectura del árbol
unrooted_tree = phy_tree #cambio de nombre de variable
ape::is.rooted(unrooted_tree) #le preguntamos si el arbol está enraizado o no
ASV_final=read.table("ASV_final_bact.txt", sep="\t", header=TRUE)
View(ASV_final)#visualizamos la tabla de ASVs para saber en que posiciones (columnas) se encuentra la taxonomia
tax = ASV_final[,2:8] #indicamos las posiciones que ocupa la taxonomia (de Kingdom a ASV)
ASV =  ASV_final[,9:ncol(ASV_final)] #indicamos las posiciones que ocupa la ocurrencia de los ASVs
dna = Biostrings::DNAStringSet(ASV_final$ASV_seqs)#guardamos la seq de cada ASV llamando a la funcion DNAStringSet del paquete Biostrings
#si tecleamos el 'dna' en la consola veremos el aspecto que tiene. Si nos fijamos bien, veremos que las secuencias las numera de de forma ascendente, pero no sabemos a que ASV corresponde
names(dna) = ASV_final$ASV_names #asignamos a cada secuencia el nombre del ASV correspondiente
row.names(tax) = ASV_final$ASV_names #hacemos que el nombre de cada linea sea justamente el nombre de los ASV
row.names(ASV) = ASV_final$ASV_names
identical(rownames(ASV), rownames(tax)) #comprobamos que los nombres de las filas son identicos y que corresponden con el nombre de los ASV.
phy_tree =  phyloseq::read_tree("phy_tree") #lectura del árbol
unrooted_tree = phy_tree #cambio de nombre de variable
ape::is.rooted(unrooted_tree) #le preguntamos si el arbol está enraizado o no
tree_root = ape::root(unrooted_tree, 1, resolve.root = T) #enraizamos el arbol y establecemos el outgroup
ape::is.rooted(tree_root) #comprobamos que esté enraizado
install.packages("devtools")#es necesario instalarlo para instalar algunos paquetes alojados en GitHub en vez de en CRAN
library(devtools)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("BiocGenerics", "ANCOMBC", "phyloseq","edgeR","microbiome"))#necesarios para que micro4all funcione correctamente
R.home()
quarto check
quarto check
install.packages("devtools")#es necesario instalarlo para instalar algunos paquetes alojados en GitHub en vez de en CRAN
library(devtools)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("BiocGenerics", "ANCOMBC", "phyloseq","edgeR","microbiome"))#necesarios para que micro4all funcione correctamente
library(BiocGenerics)
library(ANCOMBC)
library(phyloseq)
library(edgeR)
library(microbiome)
library(pairwiseAdonis)
library(micro4all)
library(tidyverse)
library(ggpubr)
library(rstatix)
library(gdata)
metadatos = read.table("metadata.txt", sep="\t", header=TRUE)
row.names(metadatos) = metadatos$samples
ASV_final=read.table("ASV_final_bact.txt", sep="\t", header=TRUE)
View(ASV_final)#visualizamos la tabla de ASVs para saber en que posiciones (columnas) se encuentra la taxonomia
tax = ASV_final[,2:8] #indicamos las posiciones que ocupa la taxonomia (de Kingdom a ASV)
ASV =  ASV_final[,9:ncol(ASV_final)] #indicamos las posiciones que ocupa la ocurrencia de los ASVs
dna = Biostrings::DNAStringSet(ASV_final$ASV_seqs)#guardamos la seq de cada ASV llamando a la funcion DNAStringSet del paquete Biostrings
#si tecleamos el 'dna' en la consola veremos el aspecto que tiene. Si nos fijamos bien, veremos que las secuencias las numera de de forma ascendente, pero no sabemos a que ASV corresponde
names(dna) = ASV_final$ASV_names #asignamos a cada secuencia el nombre del ASV correspondiente
row.names(tax) = ASV_final$ASV_names #hacemos que el nombre de cada linea sea justamente el nombre de los ASV
row.names(ASV) = ASV_final$ASV_names
identical(rownames(ASV), rownames(tax)) #comprobamos que los nombres de las filas son identicos y que corresponden con el nombre de los ASV.
phy_tree =  phyloseq::read_tree("phy_tree") #lectura del árbol
unrooted_tree = phy_tree #cambio de nombre de variable
ape::is.rooted(unrooted_tree) #le preguntamos si el arbol está enraizado o no
tree_root = ape::root(unrooted_tree, 1, resolve.root = T) #enraizamos el arbol y establecemos el outgroup
ape::is.rooted(tree_root) #comprobamos que esté enraizado
phy_OTUtable = otu_table(ASV, taxa_are_rows = T)#transforma el objeto 'ASV' en la tabla de ASVs en formato phyloseq
phy_taxonomy = tax_table(as.matrix(tax)) #idem con la taxonomia
phy_metadata = sample_data(metadatos)
#fusionamos todos los objetos para crear el objeto phyloseq definitivo
phy = phyloseq(phy_OTUtable,phy_taxonomy,phy_metadata,dna,tree_root)
phy #chequeamos el aspecto que tiene el objeto phyloseq. Es buen momento para comprobar si el número de muestras es el correcto
knitr::opts_chunk$set(collapse = FALSE)
??otu_table
metadatos = read.table("metadata.txt", sep="\t", header=TRUE)
row.names(metadatos) = metadatos$samples
ASV_final=read.table("ASV_final_bact.txt", sep="\t", header=TRUE)
View(ASV_final)#visualizamos la tabla de ASVs para saber en que posiciones (columnas) se encuentra la taxonomia
tax = ASV_final[,2:8] #indicamos las posiciones que ocupa la taxonomia (de Kingdom a ASV)
ASV =  ASV_final[,9:ncol(ASV_final)] #indicamos las posiciones que ocupa la ocurrencia de los ASVs
dna = Biostrings::DNAStringSet(ASV_final$ASV_seqs)#guardamos la seq de cada ASV llamando a la funcion DNAStringSet del paquete Biostrings
#si tecleamos el 'dna' en la consola veremos el aspecto que tiene. Si nos fijamos bien, veremos que las secuencias las numera de de forma ascendente, pero no sabemos a que ASV corresponde
names(dna) = ASV_final$ASV_names #asignamos a cada secuencia el nombre del ASV correspondiente
row.names(tax) = ASV_final$ASV_names #hacemos que el nombre de cada linea sea justamente el nombre de los ASV
row.names(ASV) = ASV_final$ASV_names
identical(rownames(ASV), rownames(tax)) #comprobamos que los nombres de las filas son identicos y que corresponden con el nombre de los ASV.
phy_tree =  phyloseq::read_tree("phy_tree") #lectura del árbol
unrooted_tree = phy_tree #cambio de nombre de variable
ape::is.rooted(unrooted_tree) #le preguntamos si el arbol está enraizado o no
tree_root = ape::root(unrooted_tree, 1, resolve.root = T) #enraizamos el arbol y establecemos el outgroup
ape::is.rooted(tree_root) #comprobamos que esté enraizado
phy_OTUtable = otu_table(ASV, taxa_are_rows = T)#transforma el objeto 'ASV' en la tabla de ASVs en formato phyloseq
phy_taxonomy = tax_table(as.matrix(tax)) #idem con la taxonomia
phy_metadata = sample_data(metadatos)
#fusionamos todos los objetos para crear el objeto phyloseq definitivo
phy = phyloseq(phy_OTUtable,phy_taxonomy,phy_metadata,dna,tree_root)
phy #chequeamos el aspecto que tiene el objeto phyloseq. Es buen momento para comprobar si el número de muestras es el correcto
tail(ASV_final)
help("install.packages")#es exactamente lo mismo, nos devuelve la misma información
help(package="install.packages")#es exactamente lo mismo, nos devuelve la misma información
help(package="vegan")#es exactamente lo mismo, nos devuelve la misma información
?install.packages() #despues del simbolo '?' escribimos el nombre de la funcion de interes
help("install.packages")#es exactamente lo mismo, nos devuelve la misma información
help(package="vegan")#nos proporciona toda la informacion de un paquete de interes (su descripcion, versiones y listado de funciones que incluye)
a=c("1","pan")
class[a]1
class[a][1]
a
class(a)
compra = c("pan", "harina", "pollo")
class(compra)
compra = c("pan", "harina", "pollo")
class(compra)
precios=c("1.50","3.75","6.98")
mixto=c("7.4","hola")
class(mixto)
compra = c("pan", "harina", "pollo")
class(compra)
precios=c("1.50","3.75","6.98")
mixto=c("7.4","hola")
class(mixto)#OJO! el valor 7.4 lo toma como carácter, pues todos los elementos han de ser del mismo tipo/clase
boo=c(TRUE,FALSE,FALSE)
class(boo)
no_boo=c("TRUE","FALSE","FALSE")
is.vector(no_boo)#es para preguntarle directamente si es un vector
precios_compra=c(precios,compra)
class(precios)
precios_compra=c(precios,compra)
class(precios_compra)
#View(precios_compra)
precios_compra
View(precios_compra)
dim(precios_compra)
length(precios_compra)
precios_compra[2]
precios_compra[pan]
precios_compra["pan"]
#queremos cambiar el segundo precio, por 0.49:
precios_compra[2]="0.49"
precios_compra
precios_compra[7]= "gelducha"
precios_compra
precios
precios[3] >  6.97
precios[3] >  6.97
which.max(precios_compra)
precios[3] >  6.97
which.max(precios)
precios
precios[which.max(precios)]
precios[which.max(precios)]
#| echo: false
precios[which.max(precios)]
matrix(1:12, nrow = 3, ncol = 4)
matriz_34=matrix(1:12, nrow = 3, ncol = 4)
matriz_34
productos
productos <- c("manzanas", "pan", "leche", "huevos", "queso")
precios <- c(1.2, 2.5, 1.0, 3.0, 4.5)
compra= sum(productos * 2)
productos <- c("manzanas", "pan", "leche", "huevos", "queso")
precios <- c(1.2, 2.5, 1.0, 3.0, 4.5)
compra= sum(precios * 2)
productos <- c("manzanas", "pan", "leche", "huevos", "queso")
precios <- c(1.2, 2.5, 1.0, 3.0, 4.5)
compra= sum(precios * 2)
productos <- c("manzanas", "pan", "leche", "huevos", "queso")
precios <- c(1.2, 2.5, 1.0, 3.0, 4.5)
compra= sum(precios * 2)
productos[which.max(precios])
productos <- c("manzanas", "pan", "leche", "huevos", "queso")
precios <- c(1.2, 2.5, 1.0, 3.0, 4.5)
compra= sum(precios * 2)
productos[]which.max(precios)
productos <- c("manzanas", "pan", "leche", "huevos", "queso")
precios <- c(1.2, 2.5, 1.0, 3.0, 4.5)
compra= sum(precios * 2)
productos[which.max(precios)]
productos = c("manzanas", "pan", "leche", "huevos", "queso")
precios=c(1.2, 2.5, 1.0, 3.0, 4.5)
compra= sum(precios * 2)
productos[which.max(precios)]
compra
1.2+2.5+1+3+4.5
resta= precios - 1
precios
resta
1.2+2.5+1+3+4.5
suma_todos=sum(precios)
suma_todos
resta= precios - 1 #debe guardarse el resultado en un nuevo vector
precios
resta
suma_todos=ln(precios)
resta= precios - 1 #debe guardarse el resultado en un nuevo vector
precios
resta
suma_todos=log(precios)
resta= precios - 1 #debe guardarse el resultado en un nuevo vector
precios
resta
log_todos=log(precios)
log_todos
altura=c(7.5, 12.8, 11.7, 7.1)
peso=c(96, 74, 85, 75.3)
altura=c(7.5, 12.8, 11.7, 7.1)
peso=c(96, 74, 85, 75.3)
col_fusion=cbind(altura,peso)
col_fusion
altura=c(7.5, 12.8, 11.7, 7.1)
peso=c(96, 74, 85, 75.3)
col_fusion=cbind(altura,peso)
col_fusion #vemos que la columna 1 equivale a la altura, y la segunda al peso
row_fusion=rbind(columna, peso)
row_fusion=rbind(altura, peso)
row_fusion
class(row_fusion)
class(col_fusion)
altura=c(7.5, 12.8, 11.7, 7.1)
peso=c(96, 74, 85, 75.3)
col_fusion=cbind(altura,peso)
col_fusion #vemos que la columna 1 equivale a la altura, y la segunda al peso
row_fusion=rbind(altura, peso)#justo se disponen al reves
class(col_fusion);class(row_fusion)
dim(row_fusion)
dim(row_fusion)
dim(row_fusion) #MUY interesante: nos devuelve el numero de filas, y el numero de columnas. Esta estructura se repetirá en el apartado 3.3 Dataframes
dim(col_fusion)
row_fusion
col_fusion
colnames(col_fusion)
colnames(col_fusion)
rownames(col_fusion)
#comprobamos los nombres de columna y fila en cada variable
colnames(col_fusion)
rownames(col_fusion)#no es nada explicativo
colnames(row_fusion)
rownames(row_fusion)
colnames(col_fusion)
rownames(col_fusion)
col_fusion
row.names(col_fusion)=c("Arbol1", "Arbol2", "Arbol3", "Arbol4")
col_fusion
row.names(col_fusion)=c("Arbol1", "Arbol2", "Arbol3", "Arbol4"); col_fusion
colnames(row_fusion)=c("Arbol1", "Arbol2", "Arbol3", "Arbol4"); row_fusion
notas <- matrix(
c(7, 8, 6, 5, 9, 7, 8, 6, 9, 6, 7, 8),
nrow = 4, ncol=3
)
notas
notas <- matrix(
c(7, 8, 6, 5, 9, 7, 8, 6, 9, 6, 7, 8),
nrow = 4, ncol=3
)
colnames(notas)= c("RStudio", "Estadistica", "Ecologia")
rownames(notas)=c("Rafa", "Lazaro", "Patricia", "Carmen")
notas
rowMeans(notas)
row_fusion
row_fusion[1,2]# fila 1, columna 2: valor 12.8
class(row_fusion)
#quiero ver toda la primera fila (todas sus columnas)
row_fusion[1,]
#quiero ver las columnas 2 y 3 de row_fusion
row_fusion[,2:3]
#quiero quitar la columna 1 de row_fusion
row_fusion2=row_fusion[,-1]
row_fusion2
notas <- matrix(
c(7, 8, 6, 5, 9, 7, 8, 6, 9, 6, 7, 8),
nrow = 4, ncol=3
)
colnames(notas)= c("RStudio", "Estadistica", "Ecologia")
rownames(notas)=c("Rafa", "Lazaro", "Patricia", "Carmen")
rowMeans(notas[1,])
notas
mean(notas[1,])
(7+9+9)/3
esta_mean=mena(notas[,2])
esta_mean=mean(notas[,2])
(9+7+8+6)/4
esta_mean
rowMeans(notas)
rowMeans(notas)[1]
notas <- matrix(
c(7, 8, 6, 5, 9, 7, 8, 6, 9, 6, 7, 8),
nrow = 4, ncol=3
)
colnames(notas)= c("RStudio", "Estadistica", "Ecologia")
rownames(notas)=c("Rafa", "Lazaro", "Patricia", "Carmen")
rafa_mean=mean(notas[1,]);rowMeans(notas)[1]
esta_mean=mean(notas[,2]);colMeans(notas)[2]
which.max(notas[ , "Ciencias"])
colMeans(notas)[2]
which.max(notas[,"Ecología"])
notas
which.max(notas[,"Ecología"])
which.max(notas[,"Ecologia"])
rafa_mean=mean(notas["Rafa",])
rafa_mean
mean(notas[,"Estadistica"])
notas
descalific=notas -1
descalific
save.image("C:/Users/radik/Desktop/Curso/.RData")
